#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""reorder CIDER hits"""

import pickle

#Parsing blast fmt6 result to reconstruct full sequence
def reorder_sequence(blast6):
	#read blast 
	count = 0
	result_handle = open(blast6)
	
	parse_of = {}
	past_query = 'NA'
		
	for line in result_handle:
		count += 1
		blast_record = line.replace("\n", "")
		split_liste = blast_record.split("\t")
		query = split_liste[0]
		subject = split_liste[1]
		identity = split_liste[2]
		length = split_liste[3]
		mismatch = split_liste[4]
		gap = split_liste[5]
		qstart = split_liste[6]
		qend = split_liste[7]
		sstart = split_liste[8]
		send = split_liste[9]
		evalue = split_liste[10]
		bitscore = split_liste[11]	
		
		query_id = query + '-' + str(count)
		#parse_of[query_id] = dict()
		
		if (float(identity) >= 99.5):
			parse_of[query_id] = dict()
			parse_of[query_id]['scaffold'] = subject
			parse_of[query_id]['coord_query'] = [qstart,qend]
			parse_of[query_id]['coord_subject'] = [sstart,send]
	
	#find sequence separate in two hits : double for loop
	listchains = []
	
	for main_query in sorted(parse_of):
		split_liste = main_query.split("-")
		main = split_liste[0]
		main_scaffold = parse_of[main_query]['scaffold']
		main_coords = parse_of[main_query]['coord_query']
		min_main = main_coords[0]
		max_main = main_coords[1]
		#take sequence at the beginning (0:5)
		if (0 <= int(min_main) <= 5):
			for sub_query in parse_of:
				split_liste = sub_query.split("-")
				sub = split_liste[0]
				sub_scaffold = parse_of[sub_query]['scaffold']
				sub_coords = parse_of[sub_query]['coord_query']
				min_sub = sub_coords[0]
				max_sub = sub_coords[1]
				#proceed of same query is on same scaffold
				if (sub == main) and (main_scaffold == sub_scaffold):
					num = int(max_main) - 10
					maxi = int(max_main)
					#find a second hit of same query who begin +- at the end of main one (-10 : main)
					if (num <= int(min_sub) <= maxi):
						#re-organise sequence based on subject coordinate : minimam min value eq first sequence
						main_subjects = parse_of[main_query]['coord_subject']
						min_Smain = main_subjects[0]
						max_Smain = main_subjects[1]
						sub_subjects = parse_of[sub_query]['coord_subject']
						min_Ssub = sub_subjects[0]
						max_Ssub = sub_subjects[1]
						#check for subject orientation
						if (min_Smain > max_Smain) and (min_Ssub > max_Ssub):
							#return the block, whole reverse orientation
							tmp = min_Smain
							min_Smain = max_Smain
							max_Smain = tmp
							tmp = min_Ssub
							min_Ssub = max_Ssub
							max_Ssub = min_Ssub
						elif(min_Smain > max_Smain)	and (min_Ssub < max_Ssub):
							#mixed orientation, not proceed
							continue
						elif(min_Smain < max_Smain)	and (min_Ssub > max_Ssub):
							#mixed orientation, not proceed
							continue
							
						if (min_Smain < min_Ssub):
							#case1 
							#check adjacent location
							maxi1 = int(min_Ssub) + 10
							num1 = int(min_Ssub) - 10
							if (num1 <= int(max_Smain) <= maxi1):
								end = int(min_sub) - 1
								chain = (str(sub) + "\t" + str(min_sub) + "-" + str(max_sub) + "\t" + str(min_main) + "-" + str(end) + "\n")
								#p2 = int(max_main) + 1
								#chain = (str(sub) + ':' + "\t" + str(min_main) + "-" + str(max_main) + "\t" + str(p2) + "-" + str(max_sub) + "\n")
								#my_out.write(chain)
								if chain not in listchains :
									listchains.append(chain)
								break
						elif (min_Ssub < min_Smain):
							#case2
							#check adjacent location
							maxi2  = int(max_Ssub)
							num2 = maxi2 -10
							if (num2 <= int(min_Smain) <= maxi2):
								end = int(min_sub) - 1
								chain = (str(sub) + "\t" + str(min_sub) + "-" + str(max_sub) + "\t" + str(min_main) + "-" + str(end) + "\n")
								if chain not in listchains :
									listchains.append(chain)
								break
						
	pick_file = 'output/reorder.pickle';
	with open(pick_file, 'wb') as pickleout:
		pickle.dump(listchains, pickleout, protocol=pickle.HIGHEST_PROTOCOL)
		
	#print(listchains)
	
	#length = len(listchains)
	#print(length)
	
	
def echo_hello():
	print("HELLO")
		

if __name__ == "__main__": 
	blast6 = '/media/vol2/scratch/lcornet/cassava/CIDER/script/output/rfile2.fasta_on_genomedb.blastn6'
	#blast6 = '/home/luc/Documents/Python-course/CIDER-cassava/input/test-shan.blast6'
	reorder_sequence(blast6)
	#echo_hello()
